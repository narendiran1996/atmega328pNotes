\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/* TCNT0 starts from 0X00 goes upto 0XFF and restarts */}
\PYG{c+cm}{/* No possible use case as it just goes upto 0xFF and restarts */}
\PYG{c+c1}{// MOde of operation to Normal Mode \PYGZhy{}\PYGZhy{} WGM0[2:0] === 000}
\PYG{c+c1}{// WGM0[2](bit3) from TCCR0B, WGM0[1](bit1)  from TCCR0A, WGM0[0](bit0)  from TCCR0A}
\PYG{n}{TCCR0A} \PYG{o}{=} \PYG{n}{TCCR0A} \PYG{o}{\PYGZam{}} \PYG{p}{(}\PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{0}\PYG{p}{)} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{1}\PYG{p}{));}
\PYG{n}{TCCR0B} \PYG{o}{=} \PYG{n}{TCCR0B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{3}\PYG{p}{);}

\PYG{c+cm}{/* What to do when timer reaches the MAX(0xFF) value */}
\PYG{c+c1}{// nothing should be done on OC0A for delay}
\PYG{c+c1}{// nothing  \PYGZhy{}\PYGZhy{} COM0A[1:0] === 00}
\PYG{c+c1}{// COM0A[1](bit7) from TCCR0A, COM0A[0](bit6) from TCCR0A}
\PYG{n}{TCCR0A} \PYG{o}{=} \PYG{n}{TCCR0A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{7}\PYG{p}{);}
\PYG{n}{TCCR0A} \PYG{o}{=} \PYG{n}{TCCR0A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{6}\PYG{p}{);}

\PYG{c+cm}{/* The delay possible = 0xff / (F\PYGZus{}CPU/prescalar) */}
\PYG{c+c1}{// lowest delay = 0xff / (16000000 / 1) = 16us}
\PYG{c+c1}{// when prescalar == 8 \PYGZhy{}\PYGZhy{}\PYGZgt{} delay = 0xff / (16000000 / 8) = 128us}
\PYG{c+c1}{// when prescalar == 64 \PYGZhy{}\PYGZhy{}\PYGZgt{} delay = 0xff / (16000000 / 64) = 1.024ms}
\PYG{c+c1}{// when prescalar == 256 \PYGZhy{}\PYGZhy{}\PYGZgt{} delay = 0xff / (16000000 / 256) = 4.096ms}
\PYG{c+c1}{// highest delay possible = 0xff / (16000000 / 1024) = 16.38ms}

\PYG{c+c1}{// start timer by setting the clock prescalar}
\PYG{c+c1}{// DIVIDE BY 8 use the same clock from I/O clock}
\PYG{c+c1}{// DIVIDE BY 8\PYGZhy{}\PYGZhy{} CS0[2:0] === 010}
\PYG{c+c1}{// CS0[2](bit2) from TCCR0B,CS0[1](bit1) from TCCR0B,CS0[0](bit0) from TCCR0B}
\PYG{n}{TCCR0B} \PYG{o}{=} \PYG{n}{TCCR0B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{0}\PYG{p}{);}
\PYG{n}{TCCR0B} \PYG{o}{=} \PYG{n}{TCCR0B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{1}\PYG{p}{);}
\PYG{n}{TCCR0B} \PYG{o}{=} \PYG{n}{TCCR0B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{p}{);}


\PYG{c+c1}{// actual delaying \PYGZhy{} wait until delay happens}
\PYG{k}{while}\PYG{p}{((}\PYG{n}{TIFR0} \PYG{o}{\PYGZam{}} \PYG{l+m+mh}{0x01}\PYG{p}{)} \PYG{o}{==} \PYG{l+m+mh}{0x00}\PYG{p}{);} \PYG{c+c1}{// checking overflow flag when overflow happns}
\PYG{c+c1}{// clearing the overflag so that we can further utilize}
\PYG{n}{TIFR0} \PYG{o}{=} \PYG{n}{TIFR0} \PYG{o}{|} \PYG{l+m+mh}{0x01}\PYG{p}{;}
\end{Verbatim}
