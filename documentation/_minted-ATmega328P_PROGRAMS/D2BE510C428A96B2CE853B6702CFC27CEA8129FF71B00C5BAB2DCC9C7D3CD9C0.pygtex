\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}define F\PYGZus{}CPU 16000000L}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}avr/io.h\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}avr/interrupt.h\PYGZgt{}}

\PYG{k+kt}{void} \PYG{n+nf}{Timer1\PYGZus{}asTimer}\PYG{p}{()}
\PYG{p}{\PYGZob{}}
	\PYG{c+cm}{/* TCNT1 starts from 0X0000 goes upto 0XFFFF and restarts */}
	\PYG{c+cm}{/* No possible use case as it just goes upto 0xFFFF and restarts */}
	\PYG{c+c1}{// MOde of operation to Normal Mode \PYGZhy{}\PYGZhy{} WGM1[3:0] === 0000}
	\PYG{c+cm}{/* WGM1[3](bit4) from TCCR1B, WGM1[2](bit3) from TCCR1B,}
\PYG{c+cm}{	 WGM1[1](bit1)  from TCC1RA, WGM1[0](bit0)  from TCCR1A*/}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM10}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM12}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM13}\PYG{p}{);}	
	\PYG{c+cm}{/* What to do when timer reaches the MAX(0xFFFF) value */}
	\PYG{c+c1}{// toggle OC1A on each time when reaches the MAX(0xFFFF)}
	\PYG{c+c1}{// which is reflected in PB1}
	\PYG{c+c1}{// Output OC1A to toglle when reaches MAX \PYGZhy{}\PYGZhy{} COM1A[1:0] === 01}
	\PYG{c+c1}{// COM1A[1](bit7) from TCCR1A, COM1A[0](bit6) from TCCR1A}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{COM1A1}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{COM1A0}\PYG{p}{);}
	\PYG{c+c1}{// toggle OC1B on each time when reaches the MAX(0xFFFF)}
	\PYG{c+c1}{// which is reflected in PB2}
	\PYG{c+c1}{// Output OC1B to toglle when reaches MAX \PYGZhy{}\PYGZhy{} COM1B[:0] === 01}
	\PYG{c+c1}{// COM1B[1](bit5) from TCCR1A, COM1B[0](bit4) from TCCR1A}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{COM1B1}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{COM1B0}\PYG{p}{);}
	\PYG{c+c1}{//Enable Interrupt of OVERFLOW flag so that interrupt can be generated}
	\PYG{n}{TIMSK1} \PYG{o}{=} \PYG{n}{TIMSK1} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{TOV1}\PYG{p}{);}
	\PYG{c+c1}{// start timer by setting the clock prescalar}
	\PYG{c+c1}{// SAME AS from I/O clock}
	\PYG{c+c1}{// same\PYGZhy{}\PYGZhy{} CS1[2:0] === 001}
	\PYG{c+c1}{// CS1[2](bit2) from TCCR1B,CS1[1](bit1) from TCCR1B,CS1[0](bit0) from TCCR1B}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS10}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS12}\PYG{p}{);}
	\PYG{c+c1}{// enabling global interrupt	}
	\PYG{n}{sei}\PYG{p}{();}
	\PYG{c+c1}{// SO ON TIME = max\PYGZus{}count / (F\PYGZus{}CPU / PRESCALAR)}
	\PYG{c+c1}{// ON TIME = 0xFFFF / (16000000/1) = 4.096ms}
	\PYG{c+c1}{// since symmetric as toggling OFF TIME = 4.096ms}
	\PYG{c+c1}{// hence, we get a square wave of fequency 1 / 8.192ms = 122.07Hz}
		 
\PYG{p}{\PYGZcb{}}
\PYG{k+kt}{void} \PYG{n+nf}{Timer1\PYGZus{}asCounter}\PYG{p}{()}
\PYG{p}{\PYGZob{}}
	\PYG{c+c1}{// MOde of operation to Normal Mode \PYGZhy{}\PYGZhy{} WGM1[3:0] === 0000}
	\PYG{c+cm}{/* WGM1[3](bit4) from TCCR1B, WGM1[2](bit3) from TCCR1B, WGM1[1](bit1) }
\PYG{c+cm}{	from TCC1RA, WGM1[0](bit0)  from TCCR1A	*/}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM10}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM12}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM13}\PYG{p}{);}
	\PYG{c+cm}{/* to count external event \PYGZhy{}we must connect source to T1 (PD5) */}
	\PYG{c+c1}{// THE CLK IS CLOCKED FROM external source}
	\PYG{c+c1}{// Falling edge of T1(PD5) \PYGZhy{}\PYGZhy{} CS1[2:0] === 110}
	\PYG{c+c1}{// CS1[2](bit2) from TCCR1B,CS1[1](bit1) from TCCR1B,CS1[0](bit0) from TCCR1B}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS10}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS12}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}
\PYG{k+kt}{void} \PYG{n+nf}{Timer1\PYGZus{}asInputCapture}\PYG{p}{()}
\PYG{p}{\PYGZob{}}
	\PYG{c+c1}{// MOde of operation to Normal Mode \PYGZhy{}\PYGZhy{} WGM1[3:0] === 0000}
	\PYG{c+cm}{/* WGM1[3](bit4) from TCCR1B, WGM1[2](bit3) from TCCR1B, WGM1[1](bit1) }
\PYG{c+cm}{	 from TCC1RA, WGM1[0](bit0)  from TCCR1A	*/}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM10}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM12}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM13}\PYG{p}{);}
	\PYG{c+c1}{// Select the edge for Input Capture}
	\PYG{c+c1}{// ICES1(bit6) from TCCR1B}
	\PYG{c+c1}{// Capture on Rising edge, ICES1 === 1}
	\PYG{n}{TCCR1B} \PYG{o}{|=} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{ICES1}\PYG{p}{);}
	\PYG{c+c1}{//Enable Interrupt of Input Capture Interrupt Enable so that interrupt can be generated}
	\PYG{n}{TIMSK1} \PYG{o}{=} \PYG{n}{TIMSK1} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{ICIE1}\PYG{p}{);}
	\PYG{c+c1}{// start timer by setting the clock prescalar}
	\PYG{c+c1}{// SAME AS from I/O clock}
	\PYG{c+c1}{// same\PYGZhy{}\PYGZhy{} CS1[2:0] === 001}
	\PYG{c+c1}{// CS1[2](bit2) from TCCR1B,CS1[1](bit1) from TCCR1B,CS1[0](bit0) from TCCR1B}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS10}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS12}\PYG{p}{);}
	\PYG{c+c1}{// enabling global interrupt}
	\PYG{n}{sei}\PYG{p}{();}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n+nf}{Timer1\PYGZus{}asDelay}\PYG{p}{()}
\PYG{p}{\PYGZob{}}
	\PYG{c+cm}{/* TCNT1 starts from 0X0000 goes upto 0XFFFF and restarts */}
	\PYG{c+cm}{/* No possible use case as it just goes upto 0xFFFF and restarts */}
	\PYG{c+c1}{// MOde of operation to Normal Mode \PYGZhy{}\PYGZhy{} WGM1[3:0] === 0000}
	\PYG{c+cm}{/* WGM1[3](bit4) from TCCR1B, WGM1[2](bit3) from TCCR1B, WGM1[1](bit1)  }
\PYG{c+cm}{	from TCC1RA, WGM1[0](bit0)  from TCCR1A	*/}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM10}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM12}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{WGM13}\PYG{p}{);}	
	\PYG{c+cm}{/* What to do when timer reaches the MAX(0xFFFF) value */}
	\PYG{c+c1}{// nothing should be done on OC1A for delay}
	\PYG{c+c1}{// nothing  \PYGZhy{}\PYGZhy{} COM1A[1:0] === 00}
	\PYG{c+c1}{// COM1A[1](bit7) from TCCR1A, COM1A[0](bit6) from TCCR1A}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{COM1A1}\PYG{p}{);}
	\PYG{n}{TCCR1A} \PYG{o}{=} \PYG{n}{TCCR1A} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{COM1A0}\PYG{p}{);}		
	\PYG{c+cm}{/* The delay possible = 0xffff / (F\PYGZus{}CPU/prescalar) */}
	\PYG{c+c1}{// lowest delay = 0xffff / (16000000 / 1) = 4.096ms}
	\PYG{c+c1}{// when prescalar == 8 \PYGZhy{}\PYGZhy{}\PYGZgt{} delay = 0xffff / (16000000 / 8) = 32.768ms}
	\PYG{c+c1}{// when prescalar == 64 \PYGZhy{}\PYGZhy{}\PYGZgt{} delay = 0xffff / (16000000 / 64) = 262.144ms}
	\PYG{c+c1}{// when prescalar == 256 \PYGZhy{}\PYGZhy{}\PYGZgt{} delay = 0xffff / (16000000 / 256) = 1.048576s}
	\PYG{c+c1}{// highest delay possible = 0xffff / (16000000 / 1024) = 4.194304s	}
	\PYG{c+c1}{// start timer by setting the clock prescalar}
	\PYG{c+c1}{// divede by 64 from I/O clock}
	\PYG{c+c1}{// divede by 64\PYGZhy{}\PYGZhy{} CS1[2:0] === 101}
	\PYG{c+c1}{// CS1[2](bit2) from TCCR1B,CS1[1](bit1) from TCCR1B,CS1[0](bit0) from TCCR1B}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS10}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS11}\PYG{p}{);}
	\PYG{n}{TCCR1B} \PYG{o}{=} \PYG{n}{TCCR1B} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{CS12}\PYG{p}{);}
	\PYG{c+c1}{// actual delaying \PYGZhy{} wait until delay happens}
	\PYG{k}{while}\PYG{p}{((}\PYG{n}{TIFR1} \PYG{o}{\PYGZam{}} \PYG{l+m+mh}{0x01}\PYG{p}{)} \PYG{o}{==} \PYG{l+m+mh}{0x00}\PYG{p}{);} \PYG{c+c1}{// checking overflow flag when overflow happns}
	\PYG{c+c1}{// clearing the overflag so that we can further utilize}
	\PYG{n}{TIFR1} \PYG{o}{=} \PYG{n}{TIFR1} \PYG{o}{|} \PYG{l+m+mh}{0x01}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\PYG{k}{volatile} \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{capVal}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{k+kt}{int} \PYG{n+nf}{main}\PYG{p}{(}\PYG{k+kt}{void}\PYG{p}{)}
\PYG{p}{\PYGZob{}}	
    \PYG{n}{DDRB} \PYG{o}{=} \PYG{n}{DDRB} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{1}\PYG{p}{)} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{p}{);}
	\PYG{n}{DDRD} \PYG{o}{=} \PYG{n}{DDRD} \PYG{o}{\PYGZam{}} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{5}\PYG{p}{);}
	\PYG{n}{DDRC} \PYG{o}{|=} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{0}\PYG{p}{)} \PYG{o}{|} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{1}\PYG{p}{);}
	\PYG{n}{PORTC} \PYG{o}{\PYGZam{}=} \PYG{o}{\PYGZti{}}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{0}\PYG{p}{);}
	\PYG{c+c1}{// Timer1\PYGZus{}asTimer();}
    \PYG{c+c1}{// Timer1\PYGZus{}asCounter();}
	\PYG{n}{Timer1\PYGZus{}asInputCapture}\PYG{p}{();}
    \PYG{k}{while}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{)}
    \PYG{p}{\PYGZob{}}
		\PYG{c+c1}{// PORTC \PYGZam{}= \PYGZti{}(1\PYGZlt{}\PYGZlt{}0);}
		\PYG{c+c1}{// Timer1\PYGZus{}asDelay();}
		\PYG{c+c1}{// PORTC |= (1\PYGZlt{}\PYGZlt{}0);}
		\PYG{c+c1}{// Timer1\PYGZus{}asDelay();}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{n}{ISR}\PYG{p}{(}\PYG{n}{TIMER1\PYGZus{}OVF\PYGZus{}vect}\PYG{p}{)}
\PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// toggle PC1 when overflows}
	\PYG{n}{PINC} \PYG{o}{|=} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{1}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{n}{ISR}\PYG{p}{(}\PYG{n}{TIMER1\PYGZus{}CAPT\PYGZus{}vect}\PYG{p}{)}
\PYG{p}{\PYGZob{}}
	\PYG{k}{if}\PYG{p}{((}\PYG{n}{TIFR1} \PYG{o}{\PYGZam{}} \PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{n}{ICF1}\PYG{p}{))} \PYG{o}{!=} \PYG{l+m+mi}{0}\PYG{p}{)}
	\PYG{p}{\PYGZob{}}
		\PYG{n}{capVal} \PYG{o}{=} \PYG{n}{ICR1L}\PYG{p}{;}
		\PYG{n}{capVal} \PYG{o}{=} \PYG{p}{(}\PYG{n}{ICR1H}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+m+mi}{8}\PYG{p}{)} \PYG{o}{|} \PYG{p}{(}\PYG{n}{capVal} \PYG{o}{\PYGZam{}} \PYG{l+m+mh}{0xFF}\PYG{p}{);}
		\PYG{c+c1}{// see datamemory}
	\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
